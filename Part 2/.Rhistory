library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
#source("convert_to_parquet.R")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
# Function to calculate plane age and perform regression analysis
process_plane_data <- function(file_path, plane_data) {
# Read the Parquet file
data <- read_parquet(file_path)
# Filter necessary columns
data <- data %>% select(TailNum, Year, DepDelay, ArrDelay)
# Merge with plane data to get issue_date
data <- merge(data, plane_data, by.x = "TailNum", by.y = "tailnum")
# Calculate plane age
data <- data %>% mutate(PlaneAge = Year - year(issue_date))
# Perform linear regression for departure and arrival delays
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
# Function to create delay plots
plot_delays <- function(year, data, dep_model, arr_model) {
# Generate prediction data
plot_data <- data.frame(PlaneAge = seq(min(data$PlaneAge), max(data$PlaneAge), length.out = 100))
plot_data$DepDelay <- predict(dep_model, newdata = plot_data)
plot_data$ArrDelay <- predict(arr_model, newdata = plot_data)
# Plot
ggplot(data, aes(x = PlaneAge)) +
geom_point(aes(y = DepDelay), alpha = 0.3, color = "red") +
geom_point(aes(y = ArrDelay), alpha = 0.3, color = "blue") +
geom_line(data = plot_data, aes(y = DepDelay), color = "red", size = 1) +
geom_line(data = plot_data, aes(y = ArrDelay), color = "blue", size = 1) +
labs(title = paste("Plane Age vs Delay in", year),
x = "Plane Age (years)",
y = "Delay (minutes)",
color = "Delay Type") +
theme_minimal() +
scale_color_manual(values = c("Departure Delay" = "red", "Arrival Delay" = "blue"))
}
processed_data[["2000"]]
dep_delay_models[["2000"]]
arr_delay_models[["2000"]]
View(processed_data)
str(processed_data)
summary(processed_data)
processed_data[["NA"]]
parquet_files
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
View(models)
View(models$data)
View(models$data)
head(models$data)
summary(models$data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Load Necessary Libraries
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(arrow)
library(knitr)
library(maditr)
library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
#source("convert_to_parquet.R")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Function to calculate plane age and perform regression analysis
process_plane_data <- function(file_path, plane_data) {
# Read the Parquet file
data <- read_parquet(file_path)
# Filter necessary columns
data <- data %>% select(TailNum, Year, DepDelay, ArrDelay)
# Merge with plane data to get issue_date
data <- merge(data, plane_data, by.x = "TailNum", by.y = "tailnum")
# Calculate plane age
data <- data %>% mutate(PlaneAge = Year - year(issue_date))
# Perform linear regression for departure and arrival delays
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
models$data <- models$data %>% drop_na()
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
# Function to create delay plots
plot_delays <- function(year, data, dep_model, arr_model) {
# Generate prediction data
plot_data <- data.frame(PlaneAge = seq(min(data$PlaneAge), max(data$PlaneAge), length.out = 100))
plot_data$DepDelay <- predict(dep_model, newdata = plot_data)
plot_data$ArrDelay <- predict(arr_model, newdata = plot_data)
# Plot
ggplot(data, aes(x = PlaneAge)) +
geom_point(aes(y = DepDelay), alpha = 0.3, color = "red") +
geom_point(aes(y = ArrDelay), alpha = 0.3, color = "blue") +
geom_line(data = plot_data, aes(y = DepDelay), color = "red", size = 1) +
geom_line(data = plot_data, aes(y = ArrDelay), color = "blue", size = 1) +
labs(title = paste("Plane Age vs Delay in", year),
x = "Plane Age (years)",
y = "Delay (minutes)",
color = "Delay Type") +
theme_minimal() +
scale_color_manual(values = c("Departure Delay" = "red", "Arrival Delay" = "blue"))
}
str(processed_data)
View(processed_data)
parquet_files
View(models)
# Example of plotting for a specific year
plot_delays(2000, processed_data[["2000"]], dep_delay_models[["2000"]], arr_delay_models[["2000"]])
models$data
dep_delay_models
View(dep_delay_models)
head(plane_data)
processed_data[["2000"]]
str(processed_data)
plot_delays(2000, processed_data[["2000"]], dep_delay_models[["2000"]], arr_delay_models[["2000"]])
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Load Necessary Libraries
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(arrow)
library(knitr)
library(maditr)
library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
#source("convert_to_parquet.R")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
# Process each Parquet file
process_plane_data <- function(file, plane_data) {
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
# Process data
data <- data %>%
mutate(PlaneAge = year - plane_data$Year) %>%
filter(!is.na(PlaneAge))
# Print to diagnose
print("After processing:")
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
models$data <- models$data %>% drop_na()
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Load Necessary Libraries
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(arrow)
library(knitr)
library(maditr)
library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
#source("convert_to_parquet.R")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type and extract the year
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
plane_data$Year <- year(plane_data$issue_date)
# Process each Parquet file
process_plane_data <- function(file, plane_data) {
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year - plane_data$Year) %>%
filter(!is.na(PlaneAge))
# Print to diagnose
print("After processing:")
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
models$data <- models$data %>% drop_na()
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Load Necessary Libraries
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(arrow)
library(knitr)
library(maditr)
library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
#source("convert_to_parquet.R")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type and extract the year
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
plane_data$Year <- year(plane_data$issue_date)
# Process each Parquet file
process_plane_data <- function(file, plane_data) {
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year - plane_data$Year) %>%
filter(!is.na(PlaneAge))
# Print to diagnose
print("After processing:")
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
models$data <- models$data %>% drop_na()
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
head(plane_data)
summary(plane_data)
summary(plane_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Load Necessary Libraries
suppressPackageStartupMessages({
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(arrow)
library(knitr)
library(maditr)
library(xtable)
library(ggplot2)
library(RColorBrewer)
})
setwd("D:/University of London/Programming for Data Science ST2195/ST2195_coursework_2023-24/Part 2")
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
summary(plane_data)
# Convert issue_date to Date type and extract the year
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
plane_data$Year <- year(plane_data$issue_date)
summary(plane_data)
# Filter out rows with NA values in issue_date or Year
# Filter out rows with NA values in issue_date or Year
# Filter out rows with NA values in issue_date or Year
plane_data <- plane_data %>% drop_na(issue_date, Year)
summary(plane_data)
# Process each Parquet file
process_plane_data <- function(file, plane_data) {
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year - plane_data$Year) %>%
filter(!is.na(PlaneAge))
# Print to diagnose
print("After processing:")
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
parquet_files
parquet_files[1]
file <- parquet_files[1]
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
file
plane_data
clear
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
print(head(data))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year - plane_data$Year) %>%
filter(!is.na(PlaneAge))
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
parquet_dir <- "dataverse_files/parquet_files"
# Directory containing the Parquet files
parquet_dir <- "dataverse_files/parquet_files"
plane_data_file <- "dataverse_files/plane-data.csv"
# Get a list of Parquet files
parquet_files <- list.files(parquet_dir, pattern = "\\.parquet$", full.names = TRUE)
# Load plane data
plane_data <- read.csv(plane_data_file) %>%
select(tailnum, issue_date)
# Convert issue_date to Date type and extract the year
plane_data$issue_date <- as.Date(plane_data$issue_date, format = "%m/%d/%Y")
plane_data$Year <- year(plane_data$issue_date)
# Filter out rows with NA values in issue_date or Year
plane_data <- plane_data %>% drop_na(issue_date, Year)
file <- parquet_files[1]
file
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year - Year.y) %>%
filter(!is.na(PlaneAge))
head(data)
head(plane_data)
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year.x - Year.y) %>%
filter(!is.na(PlaneAge))
head(data)
# Print to diagnose
print("After processing:")
print(head(data))
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
head(dep_delay_lm)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
# Process each Parquet file
process_plane_data <- function(file, plane_data) {
# Read Parquet file
data <- read_parquet(file) %>% as.data.table()
# Print to diagnose
print(paste("Processing file:", file))
print(head(data))
# Process data
data <- data %>%
left_join(plane_data, by = c("TailNum" = "tailnum")) %>%
mutate(PlaneAge = Year.x - Year.y) %>%
filter(!is.na(PlaneAge))
# Print to diagnose
print("After processing:")
print(head(data))
# Create regression models
dep_delay_lm <- lm(DepDelay ~ PlaneAge, data = data)
arr_delay_lm <- lm(ArrDelay ~ PlaneAge, data = data)
# Return regression models and data
list(dep_delay_lm = dep_delay_lm, arr_delay_lm = arr_delay_lm, data = data)
}
# Initialize lists to store results
dep_delay_models <- list()
arr_delay_models <- list()
processed_data <- list()
# Process each Parquet file (assuming one file per year)
for (file in parquet_files) {
year <- as.numeric(gsub(".*/|\\.parquet", "", file))
models <- process_plane_data(file, plane_data)
models$data <- models$data %>% drop_na()
dep_delay_models[[as.character(year)]] <- models$dep_delay_lm
arr_delay_models[[as.character(year)]] <- models$arr_delay_lm
processed_data[[as.character(year)]] <- models$data
}
